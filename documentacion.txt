1. Importaciones Necesarias
Primero, importamos las bibliotecas y módulos necesarios:


from django.http import HttpResponse
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_JUSTIFY
2. Definir la Función exportar_cirugia_como_pdf
Creamos la función que se encargará de generar el PDF:


def exportar_cirugia_como_pdf(modeladmin, request, queryset):
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="cirugia.pdf"'

    doc = SimpleDocTemplate(response, pagesize=letter)
    elements = []

    styles = getSampleStyleSheet()
    styleN = styles['Normal']
    justified_style = ParagraphStyle(
        name='Justified',
        parent=styles['Normal'],
        alignment=TA_JUSTIFY,
        spaceAfter=12
    )
response: Creación de un objeto HttpResponse con el tipo de contenido application/pdf y el encabezado Content-Disposition para descargar el archivo con el nombre "cirugia.pdf".
doc: Creación del documento PDF con tamaño de página carta (letter).
elements: Lista para almacenar los elementos (párrafos, espacios, saltos de página) que se agregarán al PDF.
styles y styleN: Obtenemos el conjunto de estilos por defecto y seleccionamos el estilo normal.
justified_style: Definimos un nuevo estilo de párrafo basado en el estilo normal pero con justificación (TA_JUSTIFY) y un espacio después de cada párrafo (spaceAfter=12).
3. Agregar el Contenido de Cada Registro
Iteramos sobre el queryset y agregamos la información de cada registro al PDF:


    for obj in queryset:
        elements.append(Paragraph(f"<b>Nombre:</b> {obj.paciente}", styleN))
        elements.append(Spacer(1, 12))
        elements.append(Paragraph(f"<b>Fecha:</b> {obj.fecha}", styleN))
        elements.append(Spacer(1, 12))
        elements.append(Paragraph(f"<b>Tipo:</b> {obj.tipo}", styleN))
        elements.append(Spacer(1, 12))
        elements.append(Paragraph("<b>Resultado:</b>", styleN))
        elements.append(Spacer(1, 12))

        resultado = Paragraph(obj.resultado.replace("\n", "<br />"), justified_style)
        elements.append(resultado)
        elements.append(Spacer(1, 12))

        elements.append(Paragraph(f"<b>Médicos:</b> {obj.medicos}", styleN))
        elements.append(Spacer(1, 12))
        elements.append(Paragraph(f"<b>Enfermeros:</b> {obj.enfermeros}", styleN))
        elements.append(Spacer(1, 24))

        elements.append(PageBreak())  # Añadir salto de página después de cada registro
Para cada objeto (obj) en el queryset, creamos párrafos con la información de la cirugía y los añadimos a elements junto con Spacer para añadir espacio entre los párrafos.
resultado: Convertimos el contenido del campo resultado en un párrafo justificado (justified_style), reemplazando los saltos de línea (\n) por etiquetas HTML de salto de línea (<br />).
PageBreak(): Añadimos un salto de página después de cada registro para asegurar que cada cirugía empiece en una nueva página.
4. Construir el Documento PDF
Finalmente, construimos el documento PDF y lo devolvemos como respuesta:


    doc.build(elements)
    return response
doc.build(elements): Construye el PDF con los elementos en la lista elements.
return response: Devuelve la respuesta HTTP con el PDF adjunto.
5. Configurar el Administrador de Django
Definimos la acción personalizada para el administrador de Django y la registramos:
 
exportar_cirugia_como_pdf.short_description = "Exportar seleccionados como PDF"

class CirugiaAdmin(admin.ModelAdmin):
    list_display = ('paciente', 'fecha', 'tipo', 'resultado', 'medicos', 'enfermeros')
    search_fields = ('paciente__nombre', 'paciente__cedula_identidad')
    list_per_page = 4
    list_filter = ('tipo', 'paciente',) 
    date_hierarchy = "fecha"
    actions = [exportar_cirugia_como_pdf]

admin.site.register(Cirugia, CirugiaAdmin)
exportar_cirugia_como_pdf.short_description: Define una descripción corta para la acción personalizada en el administrador.
CirugiaAdmin: Configuramos la vista de lista del modelo Cirugia en el administrador de Django.
admin.site.register(Cirugia, CirugiaAdmin): Registramos el modelo Cirugia con su configuración en el administrador.
Este script genera un archivo PDF con la información de las cirugías, asegurando que el campo "Resultado" esté justificado y que cada cirugía empiece en una nueva página para una mejor legibilidad.

Importaciones Necesarias
Primero, importamos las bibliotecas y módulos necesarios:

python
Copiar código
from django.http import HttpResponse
from reportlab.lib.pagesizes import letter, landscape
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.lib import colors
HttpResponse: Para devolver el PDF como una respuesta HTTP.
letter, landscape: Para definir el tamaño y la orientación de la página.
SimpleDocTemplate, Table, TableStyle, Paragraph: Para crear el documento PDF, las tablas y los estilos de párrafo.
getSampleStyleSheet: Para obtener estilos de texto.
inch: Para definir unidades de medida.
colors: Para definir colores en la tabla.
Definir la Función exportar_pacientes_como_pdf
Creamos la función que se encargará de generar el PDF:

python
Copiar código
def exportar_pacientes_como_pdf(modeladmin, request, queryset):
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="pacientes.pdf"'
    doc = SimpleDocTemplate(response, pagesize=landscape(letter))
    elements = []

    styles = getSampleStyleSheet()
    styleN = styles['Normal']
response: Creación de un objeto HttpResponse con el tipo de contenido application/pdf y el encabezado Content-Disposition para descargar el archivo con el nombre "pacientes.pdf".
doc: Creación del documento PDF con tamaño de página carta (letter) en orientación horizontal (landscape).
elements: Lista para almacenar los elementos (párrafos, tablas) que se agregarán al PDF.
styles y styleN: Obtenemos el conjunto de estilos por defecto y seleccionamos el estilo normal.
Crear los Datos para la Tabla
Preparamos los datos que se mostrarán en la tabla:

python
Copiar código
    data = [
        ['Nombre', 'Cédula', 'Fecha de Nacimiento', 'Edad', 'Sexo', 'Teléfono', 'Dirección']
    ]

    for obj in queryset:
        data.append([
            Paragraph(obj.nombre, styleN),
            Paragraph(obj.cedula_identidad, styleN),
            Paragraph(obj.fecha_nacimiento.strftime('%Y-%m-%d') if obj.fecha_nacimiento else '', styleN),
            Paragraph(str(obj.edad), styleN),
            Paragraph(obj.sexo, styleN),
            Paragraph(obj.telefono, styleN),
            Paragraph(obj.direccion, styleN)
        ])
data: Lista que contiene las filas de la tabla. La primera fila son los encabezados de las columnas.
Iteramos sobre queryset y agregamos una fila a data por cada objeto en el conjunto de consulta. Cada campo se convierte en un Paragraph para aplicar el estilo.
Ajustar el Ancho de las Columnas
Calculamos y ajustamos el ancho de las columnas si es necesario:

python
Copiar código
    total_width = sum([1.5, 1.5, 1.5, 0.5, 0.5, 1.5, 3.5]) * inch

    if total_width > letter[1]:
        factor = letter[1] / total_width
        colWidths = [width * factor for width in [1.5, 1.5, 1.5, 0.5, 0.5, 1.5, 3.5]]
    else:
        colWidths = [1.5 * inch, 1.5 * inch, 1.5 * inch, 0.5 * inch, 0.5 * inch, 1.5 * inch, 3.5 * inch]
total_width: Calcula el ancho total de la tabla en pulgadas.
Si el ancho total de la tabla es mayor que el ancho de la página (letter[1]), ajustamos el ancho de cada columna proporcionalmente.
colWidths: Lista que define el ancho de cada columna. Si el ancho total es menor que el ancho de la página, usamos los anchos originales.
Crear la Tabla
Creamos la tabla y aplicamos los estilos:

python
Copiar código
    table = Table(data, colWidths=colWidths)

    style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.white),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),  
    ])
    table.setStyle(style)
table: Crea una tabla con los datos y los anchos de columna definidos.
TableStyle: Define el estilo de la tabla:
('BACKGROUND', (0, 0), (-1, 0), colors.blue): Fondo azul para la fila de encabezado.
('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke): Texto blanco para la fila de encabezado.
('ALIGN', (0, 0), (-1, -1), 'CENTER'): Texto centrado para todas las celdas.
('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'): Fuente Helvetica-Bold para la fila de encabezado.
('BOTTOMPADDING', (0, 0), (-1, 0), 12): Espaciado inferior para la fila de encabezado.
('BACKGROUND', (0, 1), (-1, -1), colors.white): Fondo blanco para el resto de las filas.
('GRID', (0, 0), (-1, -1), 1, colors.black): Cuadrícula negra de 1 punto para todas las celdas.
('VALIGN', (0, 0), (-1, -1), 'MIDDLE'): Alineación vertical al centro para todas las celdas.
table.setStyle(style): Aplica el estilo a la tabla.
Construir el Documento PDF
Finalmente, construimos el documento PDF y lo devolvemos como respuesta:

python
Copiar código
    elements.append(table)

    doc.build(elements)
    return response
elements.append(table): Añadimos la tabla a la lista de elementos.
doc.build(elements): Construye el PDF con los elementos en la lista elements.
return response: Devuelve la respuesta HTTP con el PDF adjunto.
Configurar el Administrador de Django
Definimos la acción personalizada para el administrador de Django y la registramos:

python
Copiar código
exportar_pacientes_como_pdf.short_description = "Exportar seleccionados como PDF"

class PacienteAdmin(admin.ModelAdmin):
    list_display = ('nombre', 'cedula_identidad', 'fecha_nacimiento', 'edad', 'sexo', 'telefono', 'direccion')
    search_fields = ('nombre', 'cedula_identidad')
    list_per_page = 10
    list_filter = ('sexo',)
    actions = [exportar_pacientes_como_pdf]

admin.site.register(Paciente, PacienteAdmin)
exportar_pacientes_como_pdf.short_description: Define una descripción corta para la acción personalizada en el administrador.
PacienteAdmin: Configuramos la vista de lista del modelo Paciente en el administrador de Django.
admin.site.register(Paciente, PacienteAdmin): Registramos el modelo Paciente con su configuración en el administrador.
Este script genera un archivo PDF con la información de los pacientes seleccionados, mostrando los datos en una tabla con el contenido centrado y formateado correctamente.







